// Copyright 2024 Peter Williams <pwil3058@gmail.com> <pwil3058@bigpond.net.au>

%{
use crate::parser_attributes::*;

#[derive(Debug, Default, Clone)]
pub struct UnifiedChunk {
    _header: String,
    _lines: Box<[String]>,
}

#[derive(Debug, Default, Clone)]
pub struct UnifiedDiff {
    _before: String,
    _after: String,
    _header: String,
    _lines: Box<[UnifiedChunk]>,
}

#[derive(Debug, Default, Clone)]
pub struct UnifiedDiffs {
    _preamble: Option<String>,
    _diffs: Vec<UnifiedDiff>,
}

#[derive(Debug, Default, Clone)]
struct UnifiedDiffsData {
    preamble: Option<String>,
}

impl lalr1::ReportError<AATerminal> for UnifiedDiffsData {}

%}

%attr   ParserAttributes
%target UnifiedDiffsData

%shift_reduce 2
%%

%token  BeforePath  (^---.*\n)
%token  AfterPath   (^\+\+\+.*\n)
%token  ChunkHeader (^@@.*@@.*\n)
%token  ChunkLine   (^[ -+].*\n)
%token  Preamble    ([^-]{3}*)

%%
Specification: DiffList
     | Preamble DiffList !{ self.preamble = Some($2.token().lexeme().to_string()); !}.
DiffList:
    | Diff
    | DiffList Diff
    .
Diff: BeforePath AfterPath ChunkHeader ChunkLines
    !{  let _diff = $4.strings(); !}
    .
ChunkList:
    | ChunkList Chunk
    .
Chunk: ChunkHeader ChunkLines
    !{  let _diff = $4.strings(); !}
    .
ChunkLines: !{ $$ = ParserAttributes::Strings(vec![]); !}
    | ChunkLines ChunkLine
    !{  $$.strings_mut().push($2.token().lexeme().to_string()); !}
    .